using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gestion_de_Stock.Model
{
    public static  class BackupDatabase
    {
        public static string ConnectionSQL
        {
            get
            {
                return ConfigurationManager.ConnectionStrings["Context"].ConnectionString;
            }
        }

      
        public static string LocationBackup = System.Configuration.ConfigurationManager.AppSettings["LocationBackup"];

        public static void GetBackupDatabase()
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder();

            connBuilder.ConnectionString = ConnectionSQL;
            //-> this gives you the Server name.
            string DBName = connBuilder.InitialCatalog;



            bool fileExist = Directory.Exists(LocationBackup);
            if (!fileExist)
            {
                //Directory.CreateDirectory(); v Ficher Cacher
                //System.IO.DirectoryInfo di = System.IO.Directory.CreateDirectory(LocationBackup);
                //di.Attributes = System.IO.FileAttributes.Directory | System.IO.FileAttributes.Hidden;
            }

            //
            // First access the connection string.
            // ... This may be autogenerated in Visual Studio.
            //
            string databaseNameBackup = Path.Combine(LocationBackup, DBName + DateTime.Now.ToString("_dd_MM_yyyy") + ".bak");

            string SqlScriptBackup = @"USE " + DBName + @"  BACKUP DATABASE " + DBName + @" TO DISK = '" + databaseNameBackup + @"' WITH FORMAT, MEDIANAME = 'SQLServerBackups',NAME = 'Full Backup of " + DBName + "'";




            //
            // In a using statement, acquire the SqlConnection as a resource.
            //
            if (Directory.GetFiles(LocationBackup, DBName + DateTime.Now.ToString("_dd_MM_yyyy") + ".bak").Length == 0)
            {
                using (SqlConnection con = new SqlConnection(ConnectionSQL))
                {

                    con.Open();
                    SqlCommand command = new SqlCommand(SqlScriptBackup, con);
                    SqlDataReader reader = command.ExecuteReader();

                }

            }
            DeleteOldBackups(LocationBackup, DBName);
        }

        private static void DeleteOldBackups(string backupFolder, string dbName)
        {
            // Get all backup files for the database
            var backupFiles = Directory.GetFiles(backupFolder, dbName + "*.bak");

            // Filter out files older than 3 days
            var filesToDelete = backupFiles.Where(file => File.GetCreationTime(file) < DateTime.Now.AddDays(-3)).ToList();

            // Delete the files
            foreach (var file in filesToDelete)
            {
                File.Delete(file);
            }
        }
    }
}
